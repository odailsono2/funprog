module ExList where

import Prelude
    ( Char , String , Int , Integer , Double , Float , Bool(..)
    , Num(..) , Integral(..) , Enum(..) , Ord(..) , Eq(..)
    , not , (&&) , (||)
    , (.) , ($)
    , flip , curry , uncurry
    , otherwise , error , undefined
    )

import qualified Prelude   as P

import qualified Data.List as L

import qualified Data.Char as C

-- to use a function from a qualified import
-- you need to prefix its name with its alias
-- and a dot:
-- P.head   C.toUpper   etc.
-- I import these for you to test the original functions on ghci:
-- ghci> :t C.toUpper
-- C.toUpper :: Char -> Char
-- You MUST NOT use ANY of these in your code

head :: [a] -> a
head (x:xs) = x

tail :: [a] -> [a]
tail (x:xs) = xs

null :: (Eq a) => [a] -> Bool
null xs
  | xs == []  = True
  | otherwise = False

length :: Integral i => [a] -> i
length [] = 0
length (x:xs) = 1 + length xs

sum :: Num a => [a] -> a
sum []     = 0
sum (x:xs) = x + sum xs

product :: Num a => [a] -> a
product []     = 1
product (x:xs) = x * product xs

reverse :: [a] -> [a]
reverse [] = []
reverse (x:xs) = reverse xs ++ [x]

(++) :: [a] -> [a] -> [a]
xs ++ [] = xs
[] ++ ys = ys
(x:xs) ++ ys = x:(xs ++ ys)

-- right-associative for performance!
-- (what?!)
infixr 5 ++

-- (snoc is cons written backwards)
snoc :: a -> [a] -> [a]
snoc x ys = ys ++ [x]

(<:) :: [a] -> a -> [a]
(<:) = flip snoc

-- different implementation of (++)
(+++) :: [a] -> [a] -> [a]
xs +++ []     = xs
xs +++ [y]    = xs <: y
xs +++ (y:ys) = (xs +++ [y]) +++ ys

-- left-associative for performance!
-- (hmm?)
infixl 5 +++

minimum :: Ord a => [a] -> a
minimum []  = error "Lista Vazia"
minimum [x] = x
minimum (x:y:xs) | x < y = minimum (x:xs)
                 | otherwise = minimum (y:xs)
maximum :: Ord a => [a] -> a
maximum []  = error "Lista Vazia"
maximum [x] = x
maximum (x:y:xs) | x > y     = maximum (x:xs)
                 | otherwise = maximum (y:xs)

take :: (Eq a, Num a)=>a->[b]->[b]
take _ []                   = []
take x (y:ys)
  | x == 0    = []
  | otherwise = y : take (x-1) ys

drop :: (Eq a, Num a)=> a->[b]->[b]
drop x (y:ys)
  | x == 0       =  y:ys
  | otherwise    =  drop (x-1) ys

--takeWhile :: a->Bool->[a]->[a]
--takeWhile f (y:ys)
--  | f y == True    = y : takeWhile f ys
--  | otherwise      = takeWhile f ys
-- dropWhile
tails:: [a]->[[a]]
tails []     = [] : []
tails (x:xs) = (x : xs) : (tails xs)

inits :: [a]->[[a]]
inits []      = []
inits xs  =  reverse (tails xs)

subsequences :: [a]->[[a]]
subsequences [] = []:[]
--subsequences (x:xs) = x:subsequences xs
-- any
-- all

-- and
-- or

-- concat

-- elem using the funciton 'any' above

-- elem': same as elem but elementary definition
-- (without using other functions except (==))

-- (!!)

-- filter
-- map

-- cycle
-- repeat
-- replicate

-- isPrefixOf
-- isInfixOf
-- isSuffixOf

-- zip
-- zipWith

-- intercalate
-- nub

-- splitAt
-- what is the problem with the following?:
-- splitAt n xs  =  (take n xs, drop n xs)

-- break

-- lines
-- words
-- unlines
-- unwords

-- transpose

-- checks if the letters of a phrase form a palindrome (see below for examples)
palindrome :: String -> Bool
palindrome = undefined

{-

Examples of palindromes:

"Madam, I'm Adam"
"Step on no pets."
"Mr. Owl ate my metal worm."
"Was it a car or a cat I saw?"
"Doc, note I dissent.  A fast never prevents a fatness.  I diet on cod."

-}

